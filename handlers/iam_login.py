from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from data.config import dispatcher
from keyboards import cancel_buttons
import logging

from utils.db_api import db_commands as cmd
from utils.db_api.db_gino import db, PostgresURI


# Imports From Files
from cloud.iam_management.get_user_token import get_user_token
from cloud.iam_management.validate_token import validate_token

# States
from states.credentials_state import User_IAM_Credentials


# ----- Configurating logs ----- #
logging.basicConfig(filename="logs/logs.txt", filemode='w', level=logging.INFO)


# ----- Main message in /login----- #
login_text = """
üîî  –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Cloud\'–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!  üîî

üü™  –ß—Ç–æ–±—ã –∑–∞–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –≤–≤–µ–¥–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ IAM-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:
\t\t<b>‚îú‚îÄ</b> IAM user name (ivanov)
\t\t<b>‚îú‚îÄ</b> Account name (ex. ADV-12345...)
\t\t<b>‚îî‚îÄ</b> Password

üîí  –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è —Å–æ–∑–¥–∞–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –∫–æ–º–∞–Ω–¥–∞–º. –í –ª—é–±–æ–µ –≤—Ä–µ–º—è —Ç—ã –º–æ–∂–µ—à—å –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø—Ä–∏–º–µ–Ω–∏–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É.  üîí

üîî  –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–≤–æ–¥–∞ –∏–ª–∏ –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–∂–º–∏ –Ω–∞ "–û—Ç–º–µ–Ω–∞" –Ω–∏–∂–µ –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è  üîî
"""


# ----- /login ----- #
# Doc: –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–∏–∞–ª–æ–≥ –ø—Ä–µ–¥—Å–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IAM –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# @dispatcher.message_handler(commands=['login'])
async def iam_login(message: types.Message, state=None):

	# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–æ—Ç–∫–∏
	await User_IAM_Credentials.iam_user_name.set()

	# –í—ã–≤–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	await message.answer(text=f'{login_text}', parse_mode="html", reply_markup=cancel_buttons)

	# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è IAM user name
	await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ IAM user name:', parse_mode="html")

	# –õ–æ–≥
	logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω {message.from_user} IAM user name")
# ---------------------------------------- #


# ----- State: iam_user_name ----- #
async def get_user_name_iam(message: types.Message, state: FSMContext):
	# –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—é iam_user_name
	async with state.proxy() as data:
		data['iam_user_name'] = message.text

	# –õ–æ–≥
	logging.info(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user} –ø–æ–ª—É—á–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä IAM user name")

	# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª–µ–µ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
	await User_IAM_Credentials.next()

	# –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ IAM user name –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
	await message.answer(text="IAM user name –ø–æ–ª—É—á–µ–Ω, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ Account name (e.g. ADV-1234...): ")

	# –õ–æ–≥
	logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω {message.from_user} Account name")
# ---------------------------------------- #


# ----- State: iam_account_name ----- #
async def get_account_name_iam(message: types.Message, state: FSMContext):
	# –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—é iam_user_name
	async with state.proxy() as data:
		data['iam_account_name'] = message.text

	# –õ–æ–≥
	logging.info(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user} –ø–æ–ª—É—á–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä Account name (ADV)")

	# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª–µ–µ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
	await User_IAM_Credentials.next()

	# –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ Account name –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
	await message.answer(text="ADV —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å üîë: ")

	# –õ–æ–≥
	logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω {message.from_user} –ø–∞—Ä–æ–ª—å")
# ---------------------------------------- #


# ----- State: iam_password ----- #
async def get_user_password_iam(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['iam_password'] = message.text
		
		# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î)
		tg_id_user = message.from_user.id
	
		# –õ–æ–≥
		logging.info(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user} –ø–æ–ª—É—á–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä Password")

		# –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ Account name –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
		await message.answer(text="–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã!")

		# –õ–æ–≥
		logging.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è {message.from_user} —Ç–æ–∫–µ–Ω")

		# –ò–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç, –æ—Ç–∫—É–¥–∞ –∑–∞–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (X-Subject-Token)
		token = get_user_token(data['iam_user_name'], data['iam_account_name'], data['iam_password'])
	
		# –ï—Å–ª–∏ response code –æ—Ç–ª–∏—á–µ–Ω –æ—Ç 201, —Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º state'—ã
		if token[1] != 201 & token[1] != 200:
			await message.answer(text="‚ùå  –í–∞—à–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ª–æ–≥–∏–Ω–∞, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–≤ –≤–≤–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!  ‚ùå")
			await state.finish()
		else:
			# –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
			auth_token = token[0]['X-Subject-Token']

			# –†–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			await db.set_bind(PostgresURI)
			# await db.gino.drop_all()

			await db.gino.create_all()

			if await cmd.select_user(tg_id_user) == None:
				await cmd.add_user_and_token(tg_id_user, data['iam_user_name'],  data['iam_account_name'], data['iam_password'], auth_token)
			else:
				await message.answer(text="–†–∞–Ω–µ–µ —Ç—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, —è —Ç–µ–±—è —Ä–∞—Å–ø–æ–∑–Ω–∞–ª, –Ω–æ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
			
			# 
			if validate_token(auth_token, auth_token) == 200:
				await message.answer(text="‚úÖ  –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–ø–æ–º–∏–Ω–∞—é, –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –º–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É  ‚úÖ")
				await state.finish()
			else:
				await message.answer(text="‚ùå TOKEN –í–∞—à–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ª–æ–≥–∏–Ω–∞, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–≤ –≤–≤–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!  ‚ùå")
				await state.finish()
# ---------------------------------------- #


# ----- Cancel Login Callback Handler ----- #
async def cancel_login_signal(callback_query: types.CallbackQuery, state: FSMContext):
	# –î–∞–Ω–Ω—ã–π callback –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—à–∏–±—Å—è
	await state.finish()
	await callback_query.message.answer("–û—Ç–º–µ–Ω–∞! –ñ–¥—É –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —É–∫–∞–∑–∞–Ω–∏–π! –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
	await callback_query.answer()
# ---------------------------------------- #


def register_handlers(dp: Dispatcher):
	# Register Login Handler
	dp.register_message_handler(iam_login, text=['üîë –í—Ö–æ–¥ üîë'])

	# Register States of Login Handler
	dp.register_message_handler(get_user_name_iam, state=User_IAM_Credentials.iam_user_name)
	dp.register_message_handler(get_account_name_iam, state=User_IAM_Credentials.iam_account_name)
	dp.register_message_handler(get_user_password_iam, state=User_IAM_Credentials.iam_password)
	dp.register_callback_query_handler(cancel_login_signal, state=User_IAM_Credentials)

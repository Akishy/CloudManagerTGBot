from aiogram import types, Dispatcher
from data.config import dispatcher
import logging

# Import Cloud API Functions
from cloud.iam_management.get_project_id import get_project_id
from cloud.image_management.list_images import get_list_images
from cloud.vpc_managment.list_virtual_private_cloud import list_virtual_private_cloud
from cloud.ecs_management.flavour_management.get_list_flavours import get_list_flavours
from cloud.ecs_management.az_management.get_list_availability_zones import get_list_availability_zones
from cloud.vpc_managment.vpc_subnets_configuration.get_list_vpc_subnets import get_list_vpc_subnets

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from cloud.ecs_management.ecs_create_server import ecs_create_server

from utils.db_api import db_commands as cmd
from utils.db_api import db_gino

from aiogram.dispatcher import FSMContext
from states.ecs_state import Create_ECS

from keyboards.client_keyboards import gen_markup


# ----- Configurating logs ----- #
logging.basicConfig(filename="logs/logs.txt", filemode='w', level=logging.INFO)


# ----- /create_ecs ----- #
# @dispatcher.message_handler(text=['üíª –°–æ–∑–¥–∞—Ç—å ECS üíª'])
# ----- State: token ----- #
async def ecs_create_start(message: types.Message):
	# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–æ—Ç–∫–∏
	await Create_ECS.next()

	# –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	await message.answer('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è!', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="Ok", callback_data=f"Ok")))


async def set_token_state(callback_query: types.CallbackQuery, state: FSMContext):
	# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ (–ë–î)
	async with state.proxy() as data:
		data['token'] = await cmd.select_token(callback_query.from_user.id)

		# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—â–∏–π state –∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
		await Create_ECS.next()

		# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
		dict_projects = get_project_id(data['token'])

		# –í—ã–¥–µ–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		projects_name = list(dict_projects.keys())
		projects_id = list(dict_projects.values())
		
		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ—å—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
		await callback_query.message.answer(text='üíº –í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏, –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å ECS üíº', parse_mode="html", reply_markup=gen_markup(projects_name, projects_id, 2))
		await callback_query.answer()


async def set_project_id_state(callback_query: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		data['project_id'] = callback_query.data

		# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—â–∏–π state –∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
		await Create_ECS.next()

		# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–∞—Ö
		dict_images = get_list_images(data['token'])

		# –í—ã–¥–µ–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		images_name = list()
		images_id = list()

		for i in range(len(dict_images.images)):
			images_id.append(str(dict_images.images[i].id))
			images_name.append(dict_images.images[i].name)

		# –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		images_info = "–í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ ECS:\n"

		# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å –æ–±—Ä–∞–∑–∞–º–∏
		for i in range(len(images_name)):
			images_info = images_info + f"\t\t\t\t<b>‚îú‚îÄ</b> {images_name[i]}\n"

		await callback_query.message.answer(f"–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑ –í–ú ECS!\n" + images_info, parse_mode="html", reply_markup=gen_markup(images_name, images_id, 2))
		await callback_query.answer()


async def set_ik_image_ref(callback_query: types.CallbackQuery, state: FSMContext):
	# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
	async with state.proxy() as data:
		data['image_ref'] = callback_query.data

		# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—â–∏–π state –∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
		await Create_ECS.next()

		# –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–æ–Ω—ã –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
		# az = get_list_availability_zones(data['token'], data['project_id'])

		await callback_query.message.answer("–û–±—Ä–∞–∑ –≤—ã–±—Ä–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª–µ–º—Å—è —Å –∑–æ–Ω–æ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –í–ú", reply_markup=InlineKeyboardMarkup().add(
			InlineKeyboardButton(text="ru-moscow-1a", callback_data=f"ru-moscow-1a"),
			InlineKeyboardButton(text="ru-moscow-1b", callback_data=f"ru-moscow-1b"),
			InlineKeyboardButton(text="ru-moscow-1b", callback_data=f"ru-moscow-1b")
		))
		await callback_query.answer()


async def set_ik_az(callback_query: types.CallbackQuery, state: FSMContext):
	# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
	async with state.proxy() as data:
		data['az'] = callback_query.data

		# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—â–∏–π state –∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
		await Create_ECS.next()

		# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–∞—Ö
		# dict_flavour = get_list_flavours(data['token'], data['project_id'], data['az'])
		# print(dict_flavour.flavors[0].id)

		await callback_query.message.answer("–ó–æ–Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã –≤—ã–±—Ä–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", reply_markup=InlineKeyboardMarkup().add(
			InlineKeyboardButton(text="1 vCPUs | 2 GiB", callback_data=f"s7n.medium.2"),
			InlineKeyboardButton(text="1 vCPUs | 4 GiB", callback_data=f"s7n.medium.4"),
			InlineKeyboardButton(text="1 vCPUs | 4 GiB", callback_data=f"s6.medium.4"),
		))
		await callback_query.answer()


async def set_ik_flavour_ref(callback_query: types.CallbackQuery, state: FSMContext):
	# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
	async with state.proxy() as data:
		data['flavour_ref'] = callback_query.data

		# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—â–∏–π state –∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
		await Create_ECS.next()

		await callback_query.message.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å –∏–º—è –¥–ª—è ECS!", reply_markup=InlineKeyboardMarkup().add(
			InlineKeyboardButton(text="Ubuntu x64", callback_data="Ubuntu"),
			InlineKeyboardButton(text="Ubuntu-Server", callback_data="Ubuntu-Server"),
			InlineKeyboardButton(text="x64-Ubuntu-Server", callback_data="x64-Ubuntu-Server"),
		))

		await callback_query.answer()


async def set_ik_name(callback_query: types.CallbackQuery, state: FSMContext):
	# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
	async with state.proxy() as data:
		data['name'] = callback_query.data
		
		# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—â–∏–π state –∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
		await Create_ECS.next()

		vpc_list = list_virtual_private_cloud(data["token"], data["project_id"])

		await callback_query.message.answer("–ò–º—è –≤—ã–±—Ä–∞–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ VPC", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text=f"{vpc_list.vpcs[0].name}", callback_data=f"{vpc_list.vpcs[0].id}")))
		await callback_query.answer()


async def set_ik_vpcid(callback_query: types.CallbackQuery, state: FSMContext):
	# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
	async with state.proxy() as data:
		data['vpcid'] = callback_query.data

		# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—â–∏–π state –∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
		await Create_ECS.next()
		
		subnets_list = get_list_vpc_subnets(data["token"], data["project_id"], data["vpcid"])

		await callback_query.message.answer("VPC –≤—ã–±—Ä–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º Subnet", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text=f"{subnets_list.subnets[0].name}", callback_data=f"{str(subnets_list.subnets[0].id)}")))
		await callback_query.answer()


async def set_ik_subnet_id(callback_query: types.CallbackQuery, state: FSMContext):
	# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
	async with state.proxy() as data:
		data['subnet_id'] = callback_query.data

		# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—â–∏–π state –∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
		await Create_ECS.next()

		await callback_query.message.answer("Subnet —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–∏–ø –¥–∏—Å–∫–∞", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="SSD", callback_data="SSD")))
		await callback_query.answer()


async def set_ik_volumetype(callback_query: types.CallbackQuery, state: FSMContext):
	# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
	async with state.proxy() as data:
		data['volumetype'] = callback_query.data

		# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—â–∏–π state –∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
		await Create_ECS.next()

		await callback_query.message.answer("–¢–∏–ø –¥–∏—Å–∫–∞ –º—ã –≤—ã–±—Ä–∞–ª–∏, –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –ø–∞–º—è—Ç–∏ –≤—ã–¥–µ–ª–∏—Ç—å", reply_markup=InlineKeyboardMarkup().add(
			InlineKeyboardButton(text="60", callback_data="60"),
			InlineKeyboardButton(text="80", callback_data="80"),
			InlineKeyboardButton(text="100", callback_data="100"),
			InlineKeyboardButton(text="120", callback_data="120"),
			InlineKeyboardButton(text="150", callback_data="150")
		))
		await callback_query.answer()


async def set_ik_disc_size(callback_query: types.CallbackQuery, state: FSMContext):
	# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
	async with state.proxy() as data:
		data['disc_size'] = callback_query.data

		# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—â–∏–π state –∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
		await Create_ECS.next()

		await callback_query.message.answer(f"–ù–∞ —ç—Ç–æ–º –≤—Å–µ! –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ ECS –≤ —Å–∏—Å—Ç–µ–º–µ Cloud!\n", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")))
		await callback_query.answer()


async def create_ecs(callback_query: types.CallbackQuery, state: FSMContext):
	# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
	async with state.proxy() as data:
		data['check'] = callback_query.data

		# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—â–∏–π state –∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
		await Create_ECS.next()

		ecs = ecs_create_server(
			data["token"],
			data["project_id"],
			data["image_ref"],
			data["flavour_ref"],
			data["name"],
			data["vpcid"],
			data["subnet_id"],
			data["volumetype"],
			data["disc_size"]
		)

		await callback_query.message.answer("–ú–∞—à–∏–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è!")
		await callback_query.answer()
		await state.finish()



def register_handlers(dp: Dispatcher):
	dp.register_message_handler(ecs_create_start, text=['üíª –°–æ–∑–¥–∞—Ç—å ECS üíª'])
	dp.register_callback_query_handler(set_token_state, state=Create_ECS.token)
	dp.register_callback_query_handler(set_project_id_state, state=Create_ECS.project_id)
	dp.register_callback_query_handler(set_ik_image_ref, state=Create_ECS.image_ref)
	dp.register_callback_query_handler(set_ik_az, state=Create_ECS.az)
	dp.register_callback_query_handler(set_ik_flavour_ref, state=Create_ECS.flavour_ref)
	dp.register_callback_query_handler(set_ik_name, state=Create_ECS.name)
	dp.register_callback_query_handler(set_ik_vpcid, state=Create_ECS.vpcid) 
	dp.register_callback_query_handler(set_ik_subnet_id, state=Create_ECS.subnet_id)
	dp.register_callback_query_handler(set_ik_volumetype, state=Create_ECS.volumetype)
	dp.register_callback_query_handler(set_ik_disc_size, state=Create_ECS.disc_size)
	dp.register_callback_query_handler(create_ecs, state=Create_ECS)

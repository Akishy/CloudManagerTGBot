from aiogram import executor, types
import logging
import datetime

# Import project files for bot
from data.config import dispatcher, bot
from handlers import info_of_bot, iam_login, get_projects_info, create_ecs
from keyboards import main_buttons


# ----- Configurating logs ----- #
logging.basicConfig(filename="logs/logs.txt", filemode='w', level=logging.INFO)


# ----- Logs: start a bot ----- #
async def on_startup(_):
	logging.info("Bot activated")


# ----- Start Text ----- #
start_msg = 'ü§ñ  –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, —á—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ —Å–æ –º–Ω–æ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! –°–æ–≤–µ—Ç—É—é —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Ä–∞–∑–ª–µ–ª <b>–ò–Ω—Ñ–æ</b>!  ü§ñ'


# ----- /start ----- #
# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
@dispatcher.message_handler(commands=['start'])
async def start(message: types.Message):
	await message.answer(text=f'üü™  –ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!  üü™\n\n' + f'{start_msg}', parse_mode="html", reply_markup=main_buttons)
	logging.info(f"Greeted successfully, user={message.from_user}, time={datetime.datetime.now()}")


# ----- Handlers from files ----- #
# ----- /info ----- #
info_of_bot.register_handlers(dispatcher)

# ----- /login ----- #
iam_login.register_handlers(dispatcher)

# ----- /myprojects ----- #
get_projects_info.register_handlers(dispatcher)

# ----- /create_ecs ----- #
create_ecs.register_handlers(dispatcher)


if __name__ == "__main__":
	# Start Bot
	executor.start_polling(dispatcher, skip_updates=False, on_startup=on_startup)